" =============================================================================

"      FileName: vimrc_git
"          Desc: vundle for git port 22 (ssh way)
"        Author: Marslo
"         Email: marslo.jiao@gmail.com
"       Created: 2010-10
"       Version: 0.0.21
"    LastChange: 2014-04-11 16:02:30
" =============================================================================

set nocompatible
syntax enable on
filetype plugin indent on
set history=500
set diffopt=filler,context:3
runtime macros/matchit.vim
set tags=.\tags
if has('win32') || has('win64')
  let skip_loading_mswin=1
  " behave mswin
  source $VIMRUNTIME/vimrc_example.vim
  source $VIMRUNTIME/mswin.vim
  set viminfo=%,<800,'10,/50,:100,h,f0
  set nowrap                                                        " NoWrap lines
  language messages utf-8                                           " At Console
  set tags+=C:\Marslo\Job\Summa\TEX\SVN\netact-mpp-lab-scripts\tags
  set tags+=C:\Marslo\Job\Summa\TEX\SVN\viis-lab-scripts\tags
  set tags+=C:\Marslo\Job\Summa\TEX\SVN\tags
  autocmd BufEnter c:\Marslo\Job\Summa\TEX\SVN\netact-mpp-lab-scripts\* :setlocal tags+=c:\Marslo\Job\Summa\TEX\SVN\netact-mpp-lab-scripts\.tags
else
  set wrap                                                          " Wrap lines
  set tags=tags
  set fileformat=unix
  set viminfo=%,<800,'10,/50,:100,h,f0,n~/.vim/cache/.viminfo
  set tags+=/home/marslo/Study/Codes/Rails/sdt
endif

" ====================================== For Property =====================================
let mapleader=","
let g:mapleader=","

" Vim Bundle
filetype off
if has('win32') || has('win64')
  set rtp+=$VIM/bundle/vundle
  call vundle#rc('$VIM/bundle')
else
  set rtp+=~/.vim/bundle/vundle
  call vundle#rc()
endif

Bundle 'git@github.com:gmarik/vundle.git'
Bundle 'git@github.com:Yggdroot/indentLine.git'
Bundle 'git@github.com:kien/ctrlp.vim.git'
Bundle 'git@github.com:sjl/gundo.vim.git'
Bundle 'git@github.com:majutsushi/tagbar.git'
Bundle 'git@github.com:dantezhu/authorinfo.git'
Bundle 'git@github.com:Marslo/EnhCommentify.vim.git'
Bundle 'git@github.com:tpope/vim-pathogen.git'
Bundle 'git@github.com:gregsexton/MatchTag.git'
Bundle 'git@github.com:ervandew/supertab.git'
Bundle 'git@github.com:Marslo/auto-pairs.git'
Bundle 'git@github.com:Marslo/snipmate.vim.git'
Bundle 'git@github.com:vim-scripts/Conque-Shell.git'
Bundle 'git@github.com:vim-scripts/mru.vim.git'
Bundle 'git@github.com:vim-scripts/taglist.vim.git'
Bundle 'git@github.com:vim-scripts/winmanager.git'
" For Moving faster
Bundle 'git@github.com:rhysd/accelerated-jk.git'
" For Loading my function after vim start (reduce vim start time)
Bundle 'git@github.com:Marslo/MarsloFunc.git'
" For Groovy
Bundle 'git@github.com:vim-scripts/groovy.vim--Ruley.git'
" Bundle 'git@github.com:mwaisgold/groovy-vim-files.git'
" For Python
" Bundle 'python-mode'
Bundle 'git@github.com:vim-scripts/python_fold.git'
" Bundle 'git@github.com:kevinw/pyflakes-vim.git'
Bundle 'git@github.com:pyflakes/pyflakes.git'
Bundle 'git@github.com:vim-scripts/python_match.vim.git'
Bundle 'git@github.com:Marslo/python-syntax.git'
" For ruby
Bundle 'git@github.com:tpope/vim-rails.git'
Bundle 'git@github.com:vim-ruby/vim-ruby.git'
Bundle 'git@github.com:nelstrom/vim-textobj-rubyblock.git'
Bundle 'git@github.com:kana/vim-textobj-user.git'
Bundle 'git@github.com:vim-scripts/ruby-matchit.git'
" For Javascript
Bundle 'git@github.com:pangloss/vim-javascript.git'
Bundle 'git@github.com:jelera/vim-javascript-syntax.git'
" For web design
Bundle 'git@github.com:tpope/vim-surround.git'
Bundle 'git@github.com:tpope/vim-repeat.git'
" Colors and themes and syntax
Bundle 'git@github.com:luochen1990/rainbow.git'
Bundle 'git@github.com:vim-scripts/txt.vim.git'
Bundle 'git@github.com:hail2u/vim-css3-syntax.git'
Bundle 'git@github.com:Marslo/vim-coloresque.git'
Bundle 'git@github.com:Marslo/marslo.vim.git'
Bundle 'git@github.com:Marslo/MarsloVimOthers.git'
Bundle 'git@github.com:plasticboy/vim-markdown.git'
" Bundle 'cakebaker/scss-syntax.vim'
" For fun
" Bundle 'TeTrIs.vim'
" Bundle 'matrix.vim--Yang'
filetype plugin indent on

" ====================================== For My Function =====================================
function! GetVundle()                                                   " GetVundle() inspired by: http://pastebin.com/embed_iframe.php?i=C9fUE0M3
  let vundleAlreadyExists=1
  if has('win32') || has('win64')
    let bud='$VIM\bundle'
    let vud=bud . '\vundle'
    let vudcfg=expand(vud . '\.git\config')
  else
    let bud='~/.vim/bundle'
    let vud=bud . '/vundle'
    let vudcfg=expand(vud . '/.git/config')
  endif
  if filereadable(vudcfg)
    echo "Vundle has existed at " . expand(vud)
  else
    echo "Installing Vundle..."
    echo ""
    if isdirectory(expand(bud)) == 0
      call mkdir(expand(bud), 'p')
    endif
    execute 'silent !git clone git@github.com:gmarik/Vundle.vim.git "' . expand(vud) . '"'
    let vundleAlreadyExists=0
  endif
endfunction
command! GetVundle :call GetVundle()

nmap cmd :call marslofunc#OpenCMD()<CR>
map <M-o> :call marslofunc#OpenFoler()<CR>
command! GetVim :call marslofunc#GetVim()
nmap gf :call marslofunc#GotoFile()<CR>
nmap <F12> :call marslofunc#UpdateTags()<CR>
if has('gui_running')
  nnoremap <A--> :call marslofunc#FontSize_Reduce()<CR>
  nnoremap <A-+> :call marslofunc#FontSize_Enlarge()<CR>
endif

" ====================================== For Programming =====================================
" Programming configs for Ruby and Rails
let g:ruby_path=$RUBY_BIN
if has("autocmd")
  autocmd FileType ruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby let g:rubycomplete_buffer_loading=1
  autocmd FileType ruby let g:rubycomplete_classes_in_global=1
endif
autocmd FileType ruby compiler ruby
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
augroup filetypedetect                                              " Inspired from :h new-filetype
  au BufNewFile,BufRead *.r.erb set filetype=r.ruby
augroup end

" Programming configs for Python
au FileType python syn keyword pythonDecorator print self
let python_highlight_all = 1                                        " syntax-python

" ====================================== For Inteface =====================================
if has('gui_running')
  set go=                                                           " Hide everything (go = guioptions)
  set cpoptions+=n
  if has('win32') || has('win64')
    set lines=30                                                    " The initialize size
    set columns=136
    if !filereadable("$VIM\vim74\vimtweak.dll")
      au GUIENTER * call libcallnr("vimtweak.dll","SetAlpha",243)
    endif
  else
    set lines=32                                                    " The initialize size
    set columns=108
  endif
endif

if 'xterm-256color' == $TERM
  set t_Co=256
endif
if has('gui_running') || 'xterm-256color' == $TERM
  colorscheme marslo256
  let psc_style='cool'
else
  colorscheme marslo16
endif

if has('win32') || has('win95') || has('win64')
  nmap <leader>v :e $VIM/_vimrc<CR>
  autocmd! bufwritepost $VIM/_vimrc source %                        " autoload _vimrc
  set guifont=Monaco:h13                                            " Fonts
  set clipboard+=unnamed                                            " Copy the content to system clipboard by using y/p
  set clipboard+=unnamedplus
else
  nmap <leader>v :e ~/.vimrc<CR>
  autocmd! bufwritepost ~/.vimrc source %
  set guifont=Monaco\ 12
  set clipboard=unnamedplus
endif

set iskeyword+=.
set autochdir
set fileencodings=utf-8,ucs-bom,gbk,cp936,gb2312,gb18030            " Code Format
set termencoding=utf-8
set encoding=utf-8                                                  " Input Chinese (=cp936)
set fileencoding=utf-8
let &termencoding=&encoding
set selection=exclusive                                             " Mouse Settings
set selectmode=mouse,key
set nobackup noswapfile nowritebackup noundofile
set ruler number                                                    " ruler: Show Line and colum number; number: line number
set report=0
set autoread                                                        " Set auto read when a file is changed by outside
set showmatch                                                       " Show matching bracets (shortly jump to the other bracets)
set matchtime=2                                                     " The shortly time
set tabstop=2                                                       " Tab width
set softtabstop=2                                                   " Width for backspace
set shiftwidth=2                                                    " the tab width by using >> & <<
set autoindent smartindent
set smarttab expandtab                                              " smarttab: the width of <Tab> in first line would refer to 'Shiftwidth' parameter
set linebreak
set tw=0
set laststatus=2                                                    " Set status bar
set statusline=%m%r
set statusline+=%F\ \ %y,%{&fileformat}\                            " file path\file name & filetype
set statusline+=%=                                                  " right align
set statusline+=\ \ %-{strftime(\"%H:%M\ %d/%m/%Y\")}               " Current Time
set statusline+=\ \ %b[A],0x%B                                      " ASCII code, Hex mode
set statusline+=\ \ %c%V,%l/%L                                      " current Column, current Line/All Line
set statusline+=\ \ %p%%\
set showcmd                                                         " Show (partial) command in status line
set modifiable
set write
set incsearch hlsearch ignorecase smartcase                         " Search
set magic                                                           " Regular Expression
set linespace=0
set wildmenu
set wildmode=longest,list,full                                      " Completion mode that is used for the character
set wildignore+=*.swp,*.zip,*.exe
set noerrorbells novisualbell                                       " turn off error beep/flash
set t_vb=
set list listchars=tab:\ \ ,trail:·,extends:»,precedes:«,nbsp:·
set cursorline                                                      " Highlight the current line
set guicursor=a:hor1
set guicursor+=i-r-ci-cr-o:hor2-blinkon0
set scrolloff=3                                                     " Scroll settings
set sidescroll=1
set sidescrolloff=5
set imcmdline                                                       " Fix context menu messing
set completeopt=longest,menuone                                     " Supper Tab
set foldenable                                                      " Enable Fold
set foldcolumn=1
set foldexpr=1                                                      " Shown line number after fold
set foldlevel=100                                                   " Not fold while VIM set up
set viewoptions=folds
set backspace=indent,eol,start                                      " make backspace h, l, etc wrap to
set whichwrap+=<,>,h,l
set go+=a                                                           " Visual selection automatically copied to the clipboard
set hidden                                                          " Switch between buffers with unsaved change
set equalalways
set formatoptions=tcrqn
set formatoptions+=B                                                " Remove the backspace for combine lines (Only for chinese)
set synmaxcol=128
" set matchpairs+=<:>
" set cryptmethod=blowfish

noremap <F1> <ESC>
imap <F1> <ESC>a
map ,bd :bd<CR>
map <C-k> <C-w>k
map <C-j> <C-w>j
map <C-a> <ESC>^
imap <C-a> <ESC>I
map <C-e> <ESC>$
imap <C-e> <ESC>A
inoremap <M-f> <ESC><Space>Wi
inoremap <M-b> <Esc>Bi
inoremap <M-d> <ESC>cW
nnoremap Y y$
nnoremap <Del> "_x
xnoremap <Del> "_d
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

nmap zdb :%s/\s\+$//<CR>
nmap zhh :%s/^\s\+//<CR>
nmap zmm :g/^/ s//\=line('.').' '/<CR>
nmap zws :g/^\s*$/d<CR>
nmap zdm :%s/<C-v><CR>//ge<CR>

" ====================================== For Function =====================================
let g:ctrlp_map = '<c-p>'                                           " CtrlP
let g:ctrlp_working_path_mode = 'ra'                                " Search parents as well (stop searching sartly)
let g:ctrlp_max_height = 8
let g:ctrlp_max_depth = 100
let g:ctrl_root_makers = ['.ctrlp']                                 " Stop search if these files present
let g:ctrlp_use_caching = 1
let g:ctrlp_clear_cache_on_exit = 0                                 " Cross session caching
if has('win32') || has('win95') || has('win64')
  let g:ctrlp_cache_dir = $VIM . '/cache/ctrlp'
else
  let g:ctrlp_cache_dir = '$HOME/.vim/cache/ctrlp'
endif
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|rpm|tar|gz|bz2|zip|ctags|tags)|tags|ctags$',
    \ 'link': 'some_bad_symbolic_links',
    \ }

if has('win32') || has('win95') || has('win64')
  nmap <leader>tv :ConqueTermSplit cmd <CR>
else
  nmap <leader>tv :ConqueTermSplit bash <CR>
endif

let g:winManagerWidth = 20
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap <leader>mm :WMToggle<cr>

let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_SingleClick=1
let Tlist_File_Fold_Auto_Close=1
let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_show_Menu=1
let Tlist_sql_settings = 'sql;P:package;t:table'
let Tlist_Process_File_Always=0
nmap <leader>tl :TlistToggle<CR>

map <leader>ta :TagbarToggle<CR>
let g:tagbar_left=1
let g:tagbar_width=20
let g:tagbar_autofocus=1
let g:tagbar_expand=1
let g:tagbar_singleclick=1
let g:tagbar_iconchars=['+', '-']
let g:tagbar_autoshowtag=1

let g:EnhCommentifyAlignRight='Yes'
let g:EnhCommentifyRespectIndent='yes'
let g:EnhCommentifyPretty='Yes'
let g:EnhCommentifyMultiPartBlocks='Yes'
let g:EnhCommentifyUseSyntax='Yes'

map <leader>aid :AuthorInfoDetect<CR>
let g:vimrc_author='Marslo'
let g:vimrc_email='marslo.jiao@gmail.com'

let MRU_Auto_Close = 1                                              " Most Recently Used(MRU)
let MRU_Max_Entries = 10
let MRU_Exclude_Files='^/tmp/.*'
let MRU_Exclude_Files='^/temp/.*'
let MRU_Exclude_Files='^/media/.*'
let MRU_Exclude_Files='^/mnt/.*'
map <C-g> :MRU<CR>

augroup vimrc                                                       " For Folding
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

let g:rainbow_active = 1
let g:rainbow_operators = 1
let g:rainbow_conf = {
\   'guifgs' : ['#6A5ACD', '#B22222', '#C0FF3E', '#EEC900', '#9A32CD', '#EE7600', '#98fb98', '#686868'],
\   'ctermfgs' : 'xterm-256color' == $TERM ? ['141', '196', '112', '208', '129', '166', '85', '237'] : ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta'],
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\     'css': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'scss': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'html': {
\       'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\     },
\   }
\}

let g:indentLine_color_gui = "#282828"
let g:indentLine_color_term = 8
let g:indentLine_indentLevel = 20
let g:indentLine_showFirstIndentLevel = 1
if has('gui_running') || 'xterm-256color' == $TERM
  let g:indentLine_char = '¦'
elseif has('win32')
  let g:indentLine_char = '|'
endif

let SuperTabDefaultCompletionType = '<c-p>'
let SuperTabMappingForward = '<c-p>'
let SuperTabMappingTabLiteral = '<Tab>'
let SuperTabClosePreviewOnPopupClose = 1

match VendorPrefix /-\(moz\|webkit\|o\|ms\)-[a-zA-Z-]\+/            " For css3

" nmap j <Plug>(accelerated_jk_gj)
" nmap k <Plug>(accelerated_jk_gk)

autocmd BufWinLeave * silent! mkview
autocmd BufWinEnter * silent! loadview
autocmd BufRead,BufNewFile *.txt setfiletype txt
autocmd BufRead,BufNewFile *.t set ft=perl
autocmd FileType javascript syntax clear jsFuncBlock

if version > 703
  " autocmd FocusLost * set norelativenumber
  autocmd FocusGained * set relativenumber
  autocmd InsertEnter * set norelativenumber
  autocmd InsertLeave * set relativenumber
  autocmd CmdwinEnter * set norelativenumber
  autocmd CmdwinLeave * set relativenumber
endif

autocmd CmdwinEnter * let b:ei_save = &eventignore | set eventignore=CursorHold,InsertEnter
autocmd CmdwinLeave * let &eventignore = b:ei_save

iabbrev <leader>/* /*********************************
iabbrev <leader>*/ *********************************/
iabbrev <leader>#- #------------------
inoremap <leader>tt <C-R>=strftime("%d/%m/%y %H:%M:%S")<cr>
inoremap <leader>fn <C-R>=expand("%:t:r")<CR>
inoremap <leader>fe <C-R>=expand("%:t")<CR>
