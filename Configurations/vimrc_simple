" =============================================================================
"      FileName: .vimrc
"          Desc: Made in Marslo
"        Author: Marslo Jiao
"         Email: marslo.jiao@gmail.com
"       Created: 2010-10
"       Version: 0.0.24
"    LastChange: 2015-10-29 11:15:18
" =============================================================================

set nocompatible
set history=500
set diffopt=filler,context:3
runtime macros/matchit.vim

set fileformat=unix
set wrap                                                          " Wrap lines
set viminfo=%,<800,'10,/50,:100,h,f0,n~/.vim/cache/.viminfo
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
set tags=tags
set tags+=/home/marslo/Study/Codes/Rails/sdt
let bud=expand('~/.vim/bundle') . '/'

" ====================================== For Property =====================================
let mapleader=","
let g:mapleader=","

" Vim Bundle
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-pathogen'
Bundle 'Yggdroot/indentLine'
Bundle 'dantezhu/authorinfo'
Bundle 'Marslo/EnhCommentify.vim'
Bundle 'ervandew/supertab'
Bundle 'Marslo/auto-pairs'
Bundle 'Marslo/snipmate.vim.git'
Bundle 'yegappan/mru'
Bundle 'Marslo/MarsloFunc'
" Python
Bundle 'klen/python-mode'
Bundle 'python_fold'
Bundle 'pyflakes/pyflakes'
Bundle 'python_match.vim'
Bundle 'Marslo/python-syntax'
Bundle 'tarmack/vim-python-ftplugin'
" Web design
Bundle 'tpope/vim-surround'
Bundle 'gregsexton/MatchTag'
" Colors and themes and syntax
Bundle 'luochen1990/rainbow'
Bundle 'txt.vim'
Bundle 'Marslo/vim-coloresque'
Bundle 'Marslo/marslo.vim'
Bundle 'Marslo/MarsloVimOthers'

call vundle#end()
call pathogen#infect()
filetype plugin indent on
syntax enable on

" ====================================== For My Function =====================================
function! GetVundle()                                                   " GetVundle() inspired by: http://pastebin.com/embed_iframe.php?i=C9fUE0M3
  let vundleAlreadyExists=1
  if has('win32') || has('win64')
    let bud=$VIM . '\bundle'
    let vud=bud . '\vundle'
    let vudcfg=expand(vud . '\.git\config')
  else
    let bud='~/.vim/bundle'
    let vud=bud . '/vundle'
    let vudcfg=expand(vud . '/.git/config')
  endif

  if filereadable(vudcfg)
    echo "Vundle has existed at " . expand(vud)
  else
    echo "Installing Vundle..."
    echo ""
    if isdirectory(expand(bud)) == 0
      call mkdir(expand(bud), 'p')
    endif
    execute 'silent !git clone https://github.com/gmarik/vundle.git "' . expand(vud) . '"'
    let vundleAlreadyExists=0
  endif
endfunction
command! GetVundle :call GetVundle()

if isdirectory(expand(bud . 'MarsloFunc'))
  command! GetVim :call marslofunc#GetVim()<CR>
  nmap cmd :call marslofunc#OpenCMD()<CR>
  nmap gf :call marslofunc#GotoFile()<CR>
  xnoremap * :<C-u>call marslofunc#VSetSearch()<CR>/<C-R>=@/<CR><CR>
  xnoremap # :<C-u>call marslofunc#VSetSearch()<CR>?<C-R>=@/<CR><CR>
  map <M-o> :call marslofunc#OpenFoler()<CR>
  nmap <F12> :call marslofunc#UpdateTags()<CR>
  nmap <C-F5> :call marslofunc#RunResult()<CR>
  nmap <leader>ti :call marslofunc#callit()<CR>

  augroup resCur
    autocmd!
      autocmd BufWinEnter * call marslofunc#ResCur()
  augroup END

  set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')
  set foldtext=marslofund#MyFoldText()<CR>
endif

" ====================================== For Programming =====================================
" Programming configs for Python
if has("autocmd")
  au FileType python syn keyword pythonDecorator print self
  au FileType python set tabstop=4 softtabstop=4 shiftwidth=4
  au FileTYpe python set isk-=.
endif
let python_highlight_all = 1                                        " syntax-python

" Python-mode configuratoin
if isdirectory(expand(bud . 'python-mode'))
  let g:pymode = 1                                                  " 1: turn on python-mode plugin
  let g:pymode_warnings = 0                                         " turn off plugin's warnings
  let g:pymode_trim_whitespaces = 1                                 " trim unused white spaces on save
  let g:pymode_lint_on_write = 1
  let g:pymode_lint = 1                                             " turn on code checking
  let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe']
  let g:syntastic_python_flake8_args="--ignore=E501,W601"
  let g:pymode_trim_whitespace = 0
  let g:pymode_options = 0
  let g:pymode_rope = 0
  let g:python_check_syntax = 0
  if !has('python')
    let g:pymode = 0
  endif
endif

" Programming configs for Groovy
if has("autocmd")
  au FileType groovy set tabstop=4 softtabstop=4 shiftwidth=4
endif

" Programming configs for Makefile
if has("autocmd")
  au FileType make set tabstop=4 softtabstop=4 shiftwidth=4
endif

" Programming configs for Json
if has("autocmd")
  au FileType json set tabstop=4 softtabstop=4 shiftwidth=4
endif

" ====================================== For Inteface =====================================
if 'xterm-256color' == $TERM
  set t_Co=256
endif
if has('gui_running') || 'xterm-256color' == $TERM
  set background=dark
  colorscheme marslo
  let psc_style='cool'
else
  set t_Co=8
  set t_Sb=^[[4%dm
  set t_Sf=^[[3%dm
  colorscheme marslo16
endif

nmap <leader>v :e ~/.vimrc<CR>
autocmd! bufwritepost ~/.vimrc silent! source %
set guifont=Monaco\ 13
set clipboard=unnamedplus

set iskeyword-=.
set autochdir
set fileencodings=utf-8,ucs-bom,gbk,cp936,gb2312,gb18030            " code format
set termencoding=utf-8
set encoding=utf-8                                                  " input chinese (=cp936)
set fileencoding=utf-8
let &termencoding=&encoding
set selection=exclusive                                             " mouse settings
set selectmode=mouse,key
set nobackup noswapfile nowritebackup
set number                                                          " number: line number
set report=0
set autoread                                                        " set auto read when a file is changed by outside
set showmatch                                                       " show matching bracets (shortly jump to the other bracets)
set matchtime=1                                                     " the shortly time
set tabstop=2                                                       " tab width
set softtabstop=2                                                   " width for backspace
set shiftwidth=2                                                    " the tab width by using >> & <<
set autoindent expandtab
set smartindent
set smarttab						                                            " smarttab: the width of <tab> in first line would refer to 'shiftwidth' parameter
set linebreak
set tw=0
set modifiable
set write
set incsearch hlsearch ignorecase smartcase                         " search
set magic                                                           " regular expression
set linespace=3
set wildmenu
set wildmode=longest,list,full                                      " completion mode that is used for the character
set noerrorbells novisualbell                                       " turn off error beep/flash
set t_vb=
set list listchars=tab:\ \ ,trail:·,extends:»,precedes:«,nbsp:·
set cursorline                                                      " highlight the current line
set imcmdline                                                       " fix context menu messing
set completeopt=longest,menuone                                     " supper tab
set foldenable                                                      " enable fold
set foldcolumn=1
set foldexpr=1                                                      " shown line number after fold
set foldlevel=100                                                   " not fold while vim set up
set viewoptions=folds
set backspace=indent,eol,start                                      " make backspace h, l, etc wrap to
set whichwrap+=<,>,h,l
set go+=a                                                           " visual selection automatically copied to the clipboard
set hidden                                                          " switch between buffers with unsaved change
set equalalways
set formatoptions=tcrqn
set formatoptions+=b                                                " remove the backspace for combine lines (only for chinese)
set matchpairs+=<:>
set noendofline
if has('cmdline_info')
  set ruler                                                         " ruler: show line and colum number
  set showcmd                                                       " show (partial) command in status line
endif
if has('statusline')
  set laststatus=2                                                  " set status bar
  set statusline=%#user2#%m%r%*\ %f\ %y,%{&fileformat}
  set statusline+=%=\ %-{strftime(\"%h:%m\ %d/%m/%y\")}\ %b[a],0x%b\ %c%v,%l/%l\ %1*--%n%%--%*\ %p%%\ |
endif

augroup vimrc
  au BufReadPre * setlocal foldmethod=indent
  au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

if has('persistent_undo')
  set noundofile
endif

noremap <F1> <ESC>
inoremap <F1> <ESC>a
nnoremap j gj
nnoremap k gk
nnoremap n nzzzv
nnoremap N Nzzzv
map <leader>bd :bd<CR>
map <leader>bp :bp<CR>
map <leader>bn :bn<CR>
map <C-k> <C-w>k
map <C-j> <C-w>j
map <C-a> <ESC>^
inoremap <C-a> <ESC>I
cnoremap <C-a> <Home>
map <C-e> <ESC>$
inoremap <C-e> <ESC>A
cnoremap <C-e> <End>
nnoremap Y y$
nnoremap <Del> "_x
xnoremap <Del> "_d
nnoremap <space> za
nnoremap & :&&<CR>
xnoremap & :&&<CR>
vmap s <Plug>VSurround

inoremap <leader>tt <C-R>=strftime("%d/%m/%y %H:%M:%S")<cr>
inoremap <leader>fn <C-R>=expand("%:t:r")<CR>
inoremap <leader>fe <C-R>=expand("%:t")<CR>
inoremap <leader>w <C-O>:w<CR>
nnoremap <leader>g :%s///gn<CR>

nnoremap zdb :%s/\s\+$//<CR>
nnoremap zhh :%s/^\s\+//<CR>
nnoremap zmm :g/^/ s//\=line('.').' '/<CR>
nnoremap zws :g/^\s*$/d<CR>
nnoremap zdm :%s/<C-v><CR>//ge<CR>
nnoremap zng :%s///gn<CR>

iabbrev <leader>/* /*********************************
iabbrev <leader>*/ *********************************/
iabbrev <leader>#- #------------------

" ====================================== For Function =====================================
let g:EnhCommentifyAlignRight='Yes'
let g:EnhCommentifyRespectIndent='yes'
let g:EnhCommentifyPretty='Yes'
let g:EnhCommentifyMultiPartBlocks='Yes'
let g:EnhCommentifyUseSyntax='Yes'

map <leader>aid :AuthorInfoDetect<CR>
let g:vimrc_author='Marslo'
let g:vimrc_email='marslo.jiao@gmail.com'
au BufWritePre, FileWritePre * :AuthorInfoDetect<CR>

let MRU_Auto_Close = 1                                              " Most Recently Used(MRU)
let MRU_Max_Entries = 10
let MRU_Exclude_Files='^/tmp/.*\|^/temp/.*\|^/media/.*\|^/mnt/.*'
map <leader>re :MRU<CR>

let g:rainbow_active = 1
let g:rainbow_operators = 1
let g:rainbow_conf = {
\   'guifgs' : ['#6A5ACD', '#B22222', '#C0FF3E', '#EEC900', '#9A32CD', '#EE7600', '#98fb98', '#686868'],
\   'ctermfgs' : 'xterm-256color' == $TERM ? ['141', '196', '112', '208', '129', '166', '85', '237'] : ['lightblue', 'lightgreen', 'yellow', 'red', 'magenta'],
\   'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\   'separately': {
\     'css': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'scss': {
\       'parentheses': [['(',')'], ['\[','\]']],
\     },
\     'html': {
\       'parentheses': [['(',')'], ['\[','\]'], ['{','}']],
\     },
\   }
\}

let g:indentLine_enabled = 1
let g:indentLine_color_gui = "#282828"
let g:indentLine_color_term = 239
let g:indentLine_indentLevel = 8
let g:indentLine_showFirstIndentLevel = 0
let g:indentLine_color_tty = 0
" let g:indentLine_faster = 1
if has('gui_running') || 'xterm-256color' == $TERM
  let g:indentLine_char = '¦'
elseif has('win32')
  let g:indentLine_color_term = 8
  let g:indentLine_char = '|'
else
  let g:indentLine_color_tty_dark = 0
  let g:indentLine_char = '¦'
endif

let SuperTabDefaultCompletionType = '<c-p>'
let SuperTabMappingForward = '<c-p>'
let SuperTabMappingTabLiteral = '<Tab>'
let SuperTabClosePreviewOnPopupClose = 1

let g:AutoPairs = {'(':')', '[':']', '{':'}', '<':'>',"'":"'",'"':'"', '`':'`'}
let g:AutoPairsParens = {'(':')', '[':']', '{':'}', '<':'>'}
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'

autocmd BufWinLeave * silent! mkview
autocmd BufWinEnter * silent! loadview
autocmd BufRead,BufNewFile * setfiletype txt

" vim: tabstop=2:softtabstop=2:shiftwidth=2:expandtab
